<?php

/**
 * BaseCurrency
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $global_id
 * @property string $name
 * @property string $description
 * @property float $exchange
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property Doctrine_Collection $TransactionCurrency
 * @property Doctrine_Collection $PeriodicTransactionCurrency
 * 
 * @method integer             getId()                          Returns the current record's "id" value
 * @method string              getGlobalId()                    Returns the current record's "global_id" value
 * @method string              getName()                        Returns the current record's "name" value
 * @method string              getDescription()                 Returns the current record's "description" value
 * @method float               getExchange()                    Returns the current record's "exchange" value
 * @method timestamp           getCreatedAt()                   Returns the current record's "created_at" value
 * @method timestamp           getUpdatedAt()                   Returns the current record's "updated_at" value
 * @method Doctrine_Collection getTransactionCurrency()         Returns the current record's "TransactionCurrency" collection
 * @method Doctrine_Collection getPeriodicTransactionCurrency() Returns the current record's "PeriodicTransactionCurrency" collection
 * @method Currency            setId()                          Sets the current record's "id" value
 * @method Currency            setGlobalId()                    Sets the current record's "global_id" value
 * @method Currency            setName()                        Sets the current record's "name" value
 * @method Currency            setDescription()                 Sets the current record's "description" value
 * @method Currency            setExchange()                    Sets the current record's "exchange" value
 * @method Currency            setCreatedAt()                   Sets the current record's "created_at" value
 * @method Currency            setUpdatedAt()                   Sets the current record's "updated_at" value
 * @method Currency            setTransactionCurrency()         Sets the current record's "TransactionCurrency" collection
 * @method Currency            setPeriodicTransactionCurrency() Sets the current record's "PeriodicTransactionCurrency" collection
 * 
 * @package    rutino-server
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCurrency extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('currency');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('global_id', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', 4000, array(
             'type' => 'string',
             'length' => 4000,
             ));
        $this->hasColumn('exchange', 'float', null, array(
             'type' => 'float',
             'notnull' => true,
             ));
        $this->hasColumn('created_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('updated_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Transaction as TransactionCurrency', array(
             'local' => 'id',
             'foreign' => 'currency_id'));

        $this->hasMany('PeriodicTransaction as PeriodicTransactionCurrency', array(
             'local' => 'id',
             'foreign' => 'currency_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}